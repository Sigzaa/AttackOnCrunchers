[gd_scene load_steps=4 format=3 uid="uid://cegpftk7mtotk"]

[ext_resource type="Texture2D" uid="uid://drabay8qxb1g5" path="res://resources/place_zone.png" id="1_ejvv4"]

[sub_resource type="GDScript" id="2"]
resource_name = "TowerZoneScript"
script/source = "extends Area2D

var is_empty = true

var colliding = null

@onready var bank = get_node(\"../../Bank\") 

func _ready():
	pass

func _process(delta):
	
	if !is_empty and self.get_overlapping_areas().size() > 0:
		is_empty = false
	else:
		is_empty = true
	
	if Input.is_mouse_button_pressed( 1 ):
		handle_actions()
			
			
			
func handle_actions():

	
	for area in get_overlapping_areas():
		
		if !area.is_in_group(\"tower_collider\"):
			continue
		
		var tower_core = area.TowerNode
		
		var money_rest = bank.money - tower_core.tower_cost
		
		if tower_core.is_in_group(\"tower\") and is_empty and money_rest >= 0:
			
			bank.money = money_rest
			is_empty = false

			tower_core.place(self.position)
		

func _on_TowerZone_area_entered(area):
	
	
	if self.is_empty == false or !area.is_in_group(\"tower_collider\") or area.TowerNode.tower_cost > bank.money:
		return
	
	area.get_node(\"../../\").modulate.g = 1
	area.get_node(\"../../\").modulate.b = 1
	
	colliding = area.TowerNode

func _on_TowerZone_area_exited(area):
	if !area.is_in_group(\"tower_collider\"):
		return
	
	area.get_node(\"../../\").modulate.g = 0.3
	area.get_node(\"../../\").modulate.b = 0.3
"

[sub_resource type="RectangleShape2D" id="1"]
size = Vector2(90, 90)

[node name="TowerZone" type="Area2D" groups=["tower_zone"]]
skew = 0.349066
priority = 4.0
script = SubResource("2")

[node name="Polygon2D" type="Polygon2D" parent="."]
color = Color(0.623529, 0.309804, 0, 0.0509804)
polygon = PackedVector2Array(-86, 89, -86, -86, 86, -88, 86, 89)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("1")
debug_color = Color(0.870588, 0.34902, 0, 0.419608)

[node name="PlaceZone" type="Sprite2D" parent="."]
texture = ExtResource("1_ejvv4")

[connection signal="area_entered" from="." to="." method="_on_TowerZone_area_entered"]
[connection signal="area_exited" from="." to="." method="_on_TowerZone_area_exited"]
