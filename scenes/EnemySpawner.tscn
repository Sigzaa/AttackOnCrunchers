[gd_scene load_steps=2 format=3 uid="uid://dswf8kjkj65rc"]

[sub_resource type="GDScript" id="1"]
resource_name = "EnemySpawnerScript"
script/source = "extends Node

@export var speed = 1
@export_file(\"Level#*.tscn\") var next_level;
@export_file(\"Level#*.tscn\") var current_level;
@export var max_waves_count = 5
@onready var Cruncher = preload(\"res://scenes/Cruncher.tscn\")
@onready var Miss = preload(\"res://scenes/Miss.tscn\")
@onready var Win = preload(\"res://scenes/win.tscn\")

var wave = 1
var is_break = true;

var enemy_speed = 1


func _win():
	var win_inst = Win.instantiate();
	win_inst.next_level = next_level;
	win_inst.current_level = current_level;
	add_sibling(win_inst);

func _process(delta):
	if wave >= max_waves_count:
		_win();
	if get_tree().get_nodes_in_group(\"cruncher\").size() <= 0 and $FreqTimer.time_left <= 0 and $SpawnTimer.time_left <= 0 and is_break == false:
		$BreakTimer.start(20)
		Engine.set_time_scale(1)
		get_node(\"../Bank\").money += 110;
		is_break = true
		wave += 1

func _on_BreakTimer_timeout():
	#get_parent().add_sibling(get_node(\"../HudBar\"),Cruncher.instantiate()) # godot 3.5.1
	is_break = false
	amount_to_spawn = 5 + wave * 2;
	_on_freq_timer_timeout();
	pass	

	
	
var amount_to_spawn = 0;
func _on_freq_timer_timeout():
	if amount_to_spawn > 0:
		var percent = randf()
		if (percent > 0.4):
			var cruncher = Cruncher.instantiate();
			cruncher.max_hp += wave * 110
			cruncher.hp = cruncher.max_hp;
			add_sibling(cruncher, false)
		else:
			var miss = Miss.instantiate();
			miss.max_hp += wave * 110
			miss.hp = miss.max_hp;
			add_sibling(miss, false)
		amount_to_spawn -= 1;
		$FreqTimer.start(randf_range(1.1,3.3));

"

[node name="EnemySpawner" type="Node"]
script = SubResource("1")

[node name="BreakTimer" type="Timer" parent="."]
wait_time = 20.0
one_shot = true
autostart = true

[node name="FreqTimer" type="Timer" parent="."]
wait_time = 0.3
one_shot = true

[node name="SpawnTimer" type="Timer" parent="."]
one_shot = true

[connection signal="timeout" from="BreakTimer" to="." method="_on_BreakTimer_timeout"]
[connection signal="timeout" from="FreqTimer" to="." method="_on_freq_timer_timeout"]
[connection signal="timeout" from="SpawnTimer" to="." method="_on_spawn_timer_timeout"]
